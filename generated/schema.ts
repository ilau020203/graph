// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("managing", Value.fromI32(0));
    this.set("activated", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get managing(): i32 {
    let value = this.get("managing");
    return value!.toI32();
  }

  set managing(value: i32) {
    this.set("managing", Value.fromI32(value));
  }

  get activated(): Bytes {
    let value = this.get("activated");
    return value!.toBytes();
  }

  set activated(value: Bytes) {
    this.set("activated", Value.fromBytes(value));
  }
}

export class DepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositEntity | null {
    return changetype<DepositEntity | null>(store.get("DepositEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DepositFunctionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("isDeposit", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositFunctionEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositFunctionEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositFunctionEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositFunctionEntity | null {
    return changetype<DepositFunctionEntity | null>(
      store.get("DepositFunctionEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get profit(): BigDecimal | null {
    let value = this.get("profit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set profit(value: BigDecimal | null) {
    if (!value) {
      this.unset("profit");
    } else {
      this.set("profit", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get isDeposit(): boolean {
    let value = this.get("isDeposit");
    return value!.toBoolean();
  }

  set isDeposit(value: boolean) {
    this.set("isDeposit", Value.fromBoolean(value));
  }
}

export class DebtEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("debtor", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("creation", Value.fromBoolean(false));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DebtEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DebtEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DebtEntity", id.toString(), this);
    }
  }

  static load(id: string): DebtEntity | null {
    return changetype<DebtEntity | null>(store.get("DebtEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debtor(): Bytes {
    let value = this.get("debtor");
    return value!.toBytes();
  }

  set debtor(value: Bytes) {
    this.set("debtor", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get creation(): boolean {
    let value = this.get("creation");
    return value!.toBoolean();
  }

  set creation(value: boolean) {
    this.set("creation", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RewardsMintedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("caller", Value.fromBytes(Bytes.empty()));
    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsMintedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardsMintedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardsMintedEntity", id.toString(), this);
    }
  }

  static load(id: string): RewardsMintedEntity | null {
    return changetype<RewardsMintedEntity | null>(
      store.get("RewardsMintedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ReservesManagedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReservesManagedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReservesManagedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReservesManagedEntity", id.toString(), this);
    }
  }

  static load(id: string): ReservesManagedEntity | null {
    return changetype<ReservesManagedEntity | null>(
      store.get("ReservesManagedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ReservesYearsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("finalTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("minTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("medianTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("audited", Value.fromBoolean(false));
    this.set("reserversDays", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReservesYearsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReservesYearsEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReservesYearsEntity", id.toString(), this);
    }
  }

  static load(id: string): ReservesYearsEntity | null {
    return changetype<ReservesYearsEntity | null>(
      store.get("ReservesYearsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get startTotalReserves(): BigDecimal {
    let value = this.get("startTotalReserves");
    return value!.toBigDecimal();
  }

  set startTotalReserves(value: BigDecimal) {
    this.set("startTotalReserves", Value.fromBigDecimal(value));
  }

  get finalTotalReserves(): BigDecimal {
    let value = this.get("finalTotalReserves");
    return value!.toBigDecimal();
  }

  set finalTotalReserves(value: BigDecimal) {
    this.set("finalTotalReserves", Value.fromBigDecimal(value));
  }

  get maxTotalReserves(): BigDecimal {
    let value = this.get("maxTotalReserves");
    return value!.toBigDecimal();
  }

  set maxTotalReserves(value: BigDecimal) {
    this.set("maxTotalReserves", Value.fromBigDecimal(value));
  }

  get minTotalReserves(): BigDecimal {
    let value = this.get("minTotalReserves");
    return value!.toBigDecimal();
  }

  set minTotalReserves(value: BigDecimal) {
    this.set("minTotalReserves", Value.fromBigDecimal(value));
  }

  get medianTotalReserves(): BigDecimal {
    let value = this.get("medianTotalReserves");
    return value!.toBigDecimal();
  }

  set medianTotalReserves(value: BigDecimal) {
    this.set("medianTotalReserves", Value.fromBigDecimal(value));
  }

  get audited(): boolean {
    let value = this.get("audited");
    return value!.toBoolean();
  }

  set audited(value: boolean) {
    this.set("audited", Value.fromBoolean(value));
  }

  get reserversDays(): Array<string> {
    let value = this.get("reserversDays");
    return value!.toStringArray();
  }

  set reserversDays(value: Array<string>) {
    this.set("reserversDays", Value.fromStringArray(value));
  }
}

export class ReservesDaysEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("finalTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("minTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("medianTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("audited", Value.fromBoolean(false));
    this.set("reserversHours", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReservesDaysEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReservesDaysEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReservesDaysEntity", id.toString(), this);
    }
  }

  static load(id: string): ReservesDaysEntity | null {
    return changetype<ReservesDaysEntity | null>(
      store.get("ReservesDaysEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get startTotalReserves(): BigDecimal {
    let value = this.get("startTotalReserves");
    return value!.toBigDecimal();
  }

  set startTotalReserves(value: BigDecimal) {
    this.set("startTotalReserves", Value.fromBigDecimal(value));
  }

  get finalTotalReserves(): BigDecimal {
    let value = this.get("finalTotalReserves");
    return value!.toBigDecimal();
  }

  set finalTotalReserves(value: BigDecimal) {
    this.set("finalTotalReserves", Value.fromBigDecimal(value));
  }

  get maxTotalReserves(): BigDecimal {
    let value = this.get("maxTotalReserves");
    return value!.toBigDecimal();
  }

  set maxTotalReserves(value: BigDecimal) {
    this.set("maxTotalReserves", Value.fromBigDecimal(value));
  }

  get minTotalReserves(): BigDecimal {
    let value = this.get("minTotalReserves");
    return value!.toBigDecimal();
  }

  set minTotalReserves(value: BigDecimal) {
    this.set("minTotalReserves", Value.fromBigDecimal(value));
  }

  get medianTotalReserves(): BigDecimal {
    let value = this.get("medianTotalReserves");
    return value!.toBigDecimal();
  }

  set medianTotalReserves(value: BigDecimal) {
    this.set("medianTotalReserves", Value.fromBigDecimal(value));
  }

  get audited(): boolean {
    let value = this.get("audited");
    return value!.toBoolean();
  }

  set audited(value: boolean) {
    this.set("audited", Value.fromBoolean(value));
  }

  get reserversHours(): Array<string> {
    let value = this.get("reserversHours");
    return value!.toStringArray();
  }

  set reserversHours(value: Array<string>) {
    this.set("reserversHours", Value.fromStringArray(value));
  }
}

export class ReservesHoursEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("finalTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("minTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("medianTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("audited", Value.fromBoolean(false));
    this.set("reserversMinutes", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReservesHoursEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReservesHoursEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReservesHoursEntity", id.toString(), this);
    }
  }

  static load(id: string): ReservesHoursEntity | null {
    return changetype<ReservesHoursEntity | null>(
      store.get("ReservesHoursEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get startTotalReserves(): BigDecimal {
    let value = this.get("startTotalReserves");
    return value!.toBigDecimal();
  }

  set startTotalReserves(value: BigDecimal) {
    this.set("startTotalReserves", Value.fromBigDecimal(value));
  }

  get finalTotalReserves(): BigDecimal {
    let value = this.get("finalTotalReserves");
    return value!.toBigDecimal();
  }

  set finalTotalReserves(value: BigDecimal) {
    this.set("finalTotalReserves", Value.fromBigDecimal(value));
  }

  get maxTotalReserves(): BigDecimal {
    let value = this.get("maxTotalReserves");
    return value!.toBigDecimal();
  }

  set maxTotalReserves(value: BigDecimal) {
    this.set("maxTotalReserves", Value.fromBigDecimal(value));
  }

  get minTotalReserves(): BigDecimal {
    let value = this.get("minTotalReserves");
    return value!.toBigDecimal();
  }

  set minTotalReserves(value: BigDecimal) {
    this.set("minTotalReserves", Value.fromBigDecimal(value));
  }

  get medianTotalReserves(): BigDecimal {
    let value = this.get("medianTotalReserves");
    return value!.toBigDecimal();
  }

  set medianTotalReserves(value: BigDecimal) {
    this.set("medianTotalReserves", Value.fromBigDecimal(value));
  }

  get audited(): boolean {
    let value = this.get("audited");
    return value!.toBoolean();
  }

  set audited(value: boolean) {
    this.set("audited", Value.fromBoolean(value));
  }

  get reserversMinutes(): Array<string> {
    let value = this.get("reserversMinutes");
    return value!.toStringArray();
  }

  set reserversMinutes(value: Array<string>) {
    this.set("reserversMinutes", Value.fromStringArray(value));
  }
}

export class ReservesMinutsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("finalTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("minTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("medianTotalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("reservesSeconds", Value.fromStringArray(new Array(0)));
    this.set("audited", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReservesMinutsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReservesMinutsEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReservesMinutsEntity", id.toString(), this);
    }
  }

  static load(id: string): ReservesMinutsEntity | null {
    return changetype<ReservesMinutsEntity | null>(
      store.get("ReservesMinutsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get startTotalReserves(): BigDecimal {
    let value = this.get("startTotalReserves");
    return value!.toBigDecimal();
  }

  set startTotalReserves(value: BigDecimal) {
    this.set("startTotalReserves", Value.fromBigDecimal(value));
  }

  get finalTotalReserves(): BigDecimal {
    let value = this.get("finalTotalReserves");
    return value!.toBigDecimal();
  }

  set finalTotalReserves(value: BigDecimal) {
    this.set("finalTotalReserves", Value.fromBigDecimal(value));
  }

  get maxTotalReserves(): BigDecimal {
    let value = this.get("maxTotalReserves");
    return value!.toBigDecimal();
  }

  set maxTotalReserves(value: BigDecimal) {
    this.set("maxTotalReserves", Value.fromBigDecimal(value));
  }

  get minTotalReserves(): BigDecimal {
    let value = this.get("minTotalReserves");
    return value!.toBigDecimal();
  }

  set minTotalReserves(value: BigDecimal) {
    this.set("minTotalReserves", Value.fromBigDecimal(value));
  }

  get medianTotalReserves(): BigDecimal {
    let value = this.get("medianTotalReserves");
    return value!.toBigDecimal();
  }

  set medianTotalReserves(value: BigDecimal) {
    this.set("medianTotalReserves", Value.fromBigDecimal(value));
  }

  get reservesSeconds(): Array<string> {
    let value = this.get("reservesSeconds");
    return value!.toStringArray();
  }

  set reservesSeconds(value: Array<string>) {
    this.set("reservesSeconds", Value.fromStringArray(value));
  }

  get audited(): boolean {
    let value = this.get("audited");
    return value!.toBoolean();
  }

  set audited(value: boolean) {
    this.set("audited", Value.fromBoolean(value));
  }
}

export class ReservesEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalReserves", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("audited", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReservesEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReservesEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReservesEntity", id.toString(), this);
    }
  }

  static load(id: string): ReservesEntity | null {
    return changetype<ReservesEntity | null>(store.get("ReservesEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalReserves(): BigDecimal {
    let value = this.get("totalReserves");
    return value!.toBigDecimal();
  }

  set totalReserves(value: BigDecimal) {
    this.set("totalReserves", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get audited(): boolean {
    let value = this.get("audited");
    return value!.toBoolean();
  }

  set audited(value: boolean) {
    this.set("audited", Value.fromBoolean(value));
  }
}
